{"version":3,"sources":["TodoList/TodoInput.js","TodoList/Todoing.js","TodoList/TodoList.js","index.js"],"names":["TodoInput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","console","log","state","bind","a","b","c","this","refs","focus","ref","onChange","onKeyDown","type","parseInt","inp","onClick","Component","Todoing","idx","del","todo","map","item","key","delItem","TodoList","addItem","data","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className"],"mappings":"+OAGqBA,E,YACjB,aAAc,IAAD,8BACT,+CASJC,YAAc,SAACC,GACI,KAAZA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAebC,aAAa,SAACN,GACV,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMR,EAAEI,OAAOC,QAG7BI,QAAQC,IAAI,EAAKC,QAlBjB,EAAKZ,YAAY,EAAKA,YAAYa,KAAjB,gBACjB,EAAKD,MAAQ,CACTE,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAwBTC,KAAKC,KAAKJ,EAAEK,U,+BAGN,IAAD,OACL,OACI,6BAKK,2BAAOC,IAAI,IAAIX,KAAK,IAAIY,SAAUJ,KAAKV,aAAcD,MAAOW,KAAKL,MAAME,EAAGQ,UAAWL,KAAKjB,YAAauB,KAAK,SALjH,IAOI,2BAAOd,KAAK,IAAIY,SAAUJ,KAAKV,aAAcD,MAAOW,KAAKL,MAAMG,EAAGO,UAAWL,KAAKjB,YAAauB,KAAK,SAPxG,IASI,2BAAOd,KAAK,IAAIY,SAAUJ,KAAKV,aAAcD,MAAOW,KAAKL,MAAMI,EAAGM,UAAWL,KAAKjB,YAAauB,KAAK,SATxG,IAWI,2BAAIC,SAAwB,KAAfP,KAAKL,MAAME,EAAO,EAAEG,KAAKL,MAAME,GAAGU,SAAwB,KAAfP,KAAKL,MAAMG,EAAO,EAAEE,KAAKL,MAAMG,GAAGS,SAAwB,KAAfP,KAAKL,MAAMI,EAAO,EAAEC,KAAKL,MAAMI,IAClI,2BAAOI,IAAK,SAACK,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQG,QAAS,WAAKhB,QAAQC,IAAI,EAAKc,OAAvC,qB,GA3CuBE,aCAlBC,E,gLACTC,EAAI5B,GACRS,QAAQC,IAAIV,GACZgB,KAAKd,MAAM2B,IAAID,K,+BAET,IAAD,OACAE,EAAQd,KAAKd,MAAb4B,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKJ,GAAN,OACL,wBAAIK,IAAKL,GACJI,EADL,MACa,4BAAQP,QAAS,EAAKS,QAAQtB,KAAK,EAAKgB,IAAxC,yB,GAZAF,aCChBS,E,YACjB,aAAc,IAAD,uBACT,+CAkBJC,QAAQ,SAACC,GAGT,EAAK9B,SAAS,CACVuB,KAAK,GAAD,mBAAK,EAAKnB,MAAMmB,MAAhB,CAAqBO,OAvBhB,EA0BbH,QAAQ,SAACN,EAAI5B,GAETS,QAAQC,IAAIV,GACZ,IAAI8B,EAAK,YAAI,EAAKnB,MAAMmB,MACxBA,EAAKQ,OAAOV,EAAI,GAEhB,EAAKrB,UAAS,SAACI,EAAMT,GAEjB,OADAO,QAAQC,IAAIC,EAAMmB,MACZ,CACFA,KAAKA,OAjCb,EAAKnB,MAAM,CACPmB,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIS,EAAI,CAAC1B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAGlB0B,EAAEC,OAAOC,OAAO,GAAGH,EAFd,CAACxB,EAAE,MAPH,OAWTN,QAAQC,IAAI8B,IAAID,GAGhBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAACZ,GACtBvB,QAAQC,IAAIsB,GACZvB,QAAQC,IAAI6B,EAAIP,OAhBX,E,sEAiDT,OACI,6BACI,kBAAC,EAAD,CAAW7B,IAAKa,KAAKoB,UACrB,kBAAC,EAAD,CAASP,IAAKb,KAAKkB,QAASJ,KAAMd,KAAKL,MAAMmB,Y,GArDvBJ,aC2FtCmB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAiHpBD,SAASC,eAAe,QAK5BC,UAAU,W","file":"static/js/main.34ff6986.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n// 可以实时获取表单元素的值（表单验证）\r\nexport default class TodoInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    // 绑定this,事件处理函数写成箭头函数，或者用bind绑定\r\n    handleInput = (e)=>{\r\n        if(e.keyCode===13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n            //文本框内容一变，就会找到e.target的name值，将文本框value值赋值给name\r\n        })\r\n        console.log(this.state)\r\n    }\r\n    componentDidMount(){\r\n        // this.a.focus();\r\n        this.refs.a.focus();\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                 {/* <input onKeyDown={this.handleInput} type=\"text\"/>\r\n                 <button onClick={()=>{console.log(\"1\")}}></button>\r\n                 <input onChange={this.handleChange} type=\"text\" value={this.state.inputValue}/> */}\r\n                 {/* <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/> */}\r\n                 <input ref=\"a\" name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{parseInt(this.state.a===\"\"?0:this.state.a)+parseInt(this.state.b===\"\"?0:this.state.b)+parseInt(this.state.c===\"\"?0:this.state.c)}</p>\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>               \r\n                <button onClick={()=>{console.log(this.inp)}}>提交</button>\r\n                {/* 获取结点 */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//受控组件：\r\n// 1.给input标签添加value属性，赋值为state的值\r\n// 2.给input标签绑定OnChange事件\r\n// 在事件处理函数中setSate\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    delItem(idx,e){\r\n        console.log(e);\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                        <li key={idx}>\r\n                            {item}---<button onClick={this.delItem.bind(this,idx)}>删除</button>\r\n                        </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes={\r\n    todo:PropTypes.array\r\n}","import React, { Component } from 'react'\r\nimport TodoInput from './TodoInput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        // 深拷贝、浅拷贝\r\n        var obj={a:100,b:[1,2,3]};\r\n        var obj1={c:300};\r\n        // var o={...obj};\r\n        var o=Object.assign({},obj,obj1);\r\n        // var o=JSON.parse(JSON.stringify(obj));//深拷贝\r\n        console.log(o===obj);\r\n        // o.b[0]=200;\r\n        // console.log(obj);\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);//属性\r\n            console.log(obj[item]);//属性值\r\n        })\r\n    }\r\n    addItem=(data)=>{\r\n    //    this.state.todo.push(data);\r\n    //    console.log(this.state.todo);\r\n    this.setState({\r\n        todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem=(idx,e)=>{\r\n        // 1.不能直接改变或处理state,通过setState改变\r\n        console.log(e);\r\n        let todo=[...this.state.todo];//拷贝\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return{\r\n                todo:todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，可以像上面那样，把第一个参数写成一个函数\r\n        // this.setState({\r\n        //     todo:todo\r\n            // todo:this.state.num+100; \r\n        //     },()=>\r\n        //     {\r\n        //         console.log(this.state.todo);\r\n        //     }\r\n        // )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TodoInput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// import React from 'react';\nimport React,{Fragment}from 'react';\nimport ReactDOM from 'react-dom';\n// import {ShowTime} from'./ShowTime.js';\n// import './index.css'\nimport TodoList from './TodoList/TodoList.js';\n\n\n\n/*\nfunction ShowTime(props) {//props是一个对象   <React.Fragment>  解构后可以直接用Fragment\n    return (\n        <React.Fragment>  \n        <div>\n            <div>{props.name}</div>\n            <div>{new Date().toLocaleString()}</div>\n        </div>\n        </React.Fragment>\n    )\n}\n\nReactDOM.render(<ShowTime age=\"20\" name=\"zhangsan\"/>,document.getElementById('root'));\n*/\n\n/*\n函数声明组件\nfunction ShowTime(props){\n    console.log(props);\n    return (<Fragment>\n                <div>{props.name}{props.age}</div>\n                <div>\n                    {new Date().toLocaleString()}\n                </div>\n            </Fragment>\n        )\n}*/\n// class ShowTime extends React.Component{\n//     constructor(){//构造器中如果相用props属性的话 就。。\n//         super();\n//         this.state={\n//             time:new Date().toLocaleString(),\n//             a:100,\n//             b:200\n//         }\n//         console.log(constructor);\n//        setInterval(() => {\n//         this.setState({\n//             time:new Date().toLocaleString()\n//         })\n//     }, 1000)\n//     }\n//     getSnapshotBeforeUpdate(){\n//         console.log(\"getSnapshot\");\n//         return {name:this.state.name};\n//     }\n//     componentDidUpdate(preProps,preState,data){\n//         console.log('DidUpdate');\n//         console.log(preState);\n//         console.log(this.state.time);\n//     }\n//     shouldComponentUpdate(){\n//         console.log(\"DidUpdate\");\n//         if(this.state.a>10){\n//             return true;\n//         }\n//     }\n//     render(){\n//         var {name,age}=this.props;//解构\n//         return(\n//             <Fragment>\n//                 {/* 条件渲染 */}\n//                 {name.length>5?<div>姓名:{name}</div>:\"\"}\n//                 {name.length>5&&<div>姓名:{name}</div>}\n//                 <div>{this.state.time}</div>\n//                 {/* <div>姓名:{name}</div> */}\n//                 {/* <div>年龄:{age}</div> */}\n//                 {/* 循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{\n//                             if(index%2==0){\n//                                 return <p key={index}>{item}</p>\n//                             }\n//                         })//返回数组\n//                     }\n//                 </div>\n//             </Fragment>\n//         )\n//     }\n// }\n\n// 组件交互\n// 父组件---->子组件:调用子组件时添加属性,子组件通过props拿到传递的数据\n//子组件-->父组件\n\nReactDOM.render(\n    <TodoList/>,\n    document.getElementById('root')\n)\n\n// var num = [<p>1</p>,<p>2</p>,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    container.appendChild(ele);\n}\nrender(obj,document.getElementById('root'));\n*/\n//------------------------------------------------------------------------------------------------\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文档\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合成一个render tree\n// 页面回流(重排reflow):DOM结构变化、内容变化、大小、位置的变化\n// 页面重绘(repaint):颜色的变化(背景色、字体颜色、边框颜色)\n// -----------------------------------------------------------------------------------------------\n\n// 1.先用变量进行DOM处理，最后再进行一次渲染----------------------------------------------------------\n// console.time('time');\n// var div= document.getElementById('root');\n// var str='';\n// for(var i=0;i<1000;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n// 2.对于样式的处理、------------------------------------------------------------------------------------\nvar div=document.getElementById('root');\n/*div.style.width='100px';\ndiv.style.height='100px';\ndiv.style.background='red';\n*/\ndiv.className='active';\n// 3.offsetLeft、offsetWidth等都会引起回流 慎用-----------------------------------------------------\n// var wid=div.offsetWidth;\n// setInterval(()=>{\n//     wid+=1;\n//     div.style.width=wid+'px';\n// },100)\n// 4.文档碎片\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// bable编译  返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n"],"sourceRoot":""}